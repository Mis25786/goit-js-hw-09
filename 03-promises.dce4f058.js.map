{"mappings":"gfAqDA,IAAAA,EAAAC,EAAA,SA4DA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEhCC,EAAS,CAAEL,WAAUC,SAI3B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQF,GAGRG,EAAOH,E,GAGRJ,E,IAzDMS,SAASC,cAAc,SAO/BC,iBAAiB,UAStB,SAAkBC,GAChBA,EAAEC,iBAQwD,IALpC,IAAlBC,GAASF,EAAEG,cAAcC,SAAShB,MAAMiB,MACxCC,GAAQN,EAAEG,cAAcC,SAASE,KAAKD,MACtCE,GAAUP,EAAEG,cAAcC,SAASG,OAAOF,MAGrCG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCtB,EAAcsB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,QAAQC,IACN5B,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,O,IAGhE4B,OAAM,SAAAN,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,QAAQC,IACN5B,EAAA6B,OAAOI,QAAQ,sBAAuCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,O,IAGlEc,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["//! Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//todo Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n//todo стільки разів, скільки ввели в поле amount.\n//todo Під час кожного виклику передай їй номер промісу (position), що створюється,\n//todo і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n//todo Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//todo який виконується або відхиляється через delay часу.\n//todo Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay\n//todo зі значеннями однойменних параметрів.\n//todo Використовуй початковий код функції для вибору того, що потрібно зробити з промісом\n//todo - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n//?==========================================================\n//* імпортуємо бібліотеку notiflix\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//* викликати функцію під час сабміту\n//* викликати функцію - вказану кількість разів перебор\n//* робити затримку викликів введену кількість користувачем amount\n//* створити проміс в функції яка буде повертати проміс який виконується або відхиляється через delay часу\n//* його значення має бути об'єкт в якому будуть властивості position і delay\n\n//* доступ до тегів\n// const refs = {\n//   form: document.querySelector('.form'),\n\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n\n//   submit: document.querySelector('button[type=\"submit\"]'),\n// };\n\nconst form = document.querySelector('.form');\n// const delay = document.querySelector('input[name=\"delay\"]');\n// const step = document.querySelector('input[name=\"step\"]');\n// const amount = document.querySelector('input[name=\"amount\"]');\n// const submit = document.querySelector('button[type=\"submit\"]');\n\n//* на момент сабміту форми викликає функцію createPromise\nform.addEventListener('submit', onSubmit);\n\n// const delay = 0;\n// const step = 0;\n// const amount = 0;\n// console.log(delay);\n// console.log(step);\n// console.log(amount);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  //* витягуємо данні з інпутів\n  let delay = +e.currentTarget.elements.delay.value;\n  let step = +e.currentTarget.elements.step.value;\n  let amount = +e.currentTarget.elements.amount.value;\n\n  //* викликати функцію - вказану кількість разів і виводимо повідомлення\n  for (let i = 0; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        console.log(\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n        );\n      });\n    delay += step;\n  }\n}\n//*============\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  //* деструктурізація об'єкта\n  const object = { position, delay };\n\n  //* створити проміс в функції яка буде повертати проміс який виконується або відхиляється через delay часу\n  //* його значення має бути об'єкт в якому будуть властивості position і delay\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(object);\n        // Fulfill\n      } else {\n        reject(object);\n        // Reject\n      }\n    }, delay);\n  });\n}\n\n//?========================================\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","object","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","currentTarget","elements","value","step","amount","i","then","param","console","log","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.dce4f058.js.map"}