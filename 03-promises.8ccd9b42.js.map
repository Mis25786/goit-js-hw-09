{"mappings":"oeAgDAA,EAAA,UAGa,CACXC,KAAMC,SAASC,cAAc,SAE7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,wBAE/BI,OAAQL,SAASC,cAAc,2BAG5BF,KAAKO,iBAAiB,SAE3B,WACEC,QAAQC,IAAI,e","sources":["src/js/03-promises.js"],"sourcesContent":["//! Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//todo Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n//todo стільки разів, скільки ввели в поле amount.\n//todo Під час кожного виклику передай їй номер промісу (position), що створюється,\n//todo і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n//?==========================================================\n//* імпортуємо бібліотеку notiflix\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//* доступ до інпутів\nconst refs = {\n  form: document.querySelector('.form'),\n\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n\n  submit: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('input', onDateInput);\n\nfunction onDateInput() {\n  console.log('zis input =>');\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n\n  //   .then(({ position, delay }) => {\n  //     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //   })\n  //   .catch(({ position, delay }) => {\n  //     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  //   });\n}\n//\n// createPromise(2, 1500)\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n///\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//?========================================\n// const form = document.querySelector('.form');\n// const refs = {\n//   delay: document.querySelector('[name = \"delay\"]'),\n//   step: document.querySelector('[name = \"step\"]'),\n//   amount: document.querySelector('[name = \"amount\"]'),\n// };\n// const btn = document.querySelector('button');\n\n// form.addEventListener('submit', onClick);\n\n// function createPromise(position, delay) {\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// function onClick(event) {\n//   event.preventDefault();\n\n//   let delay = Number(refs.delay.value);\n//   let step = Number(refs.step.value);\n//   let amount = Number(refs.amount.value);\n\n//   for (let i = 1; i <= amount; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     delay += step;\n//   }\n// }\n\n//?================================================\n// // Import library\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// // Get form element\n// const formRef = document.querySelector('.form');\n\n// // Set event listener submit on form\n// formRef.addEventListener('submit', onSubmitForm);\n\n// // Submit form\n// function onSubmitForm(e) {\n//   e.preventDefault();\n\n//   let delay = Number(formRef.delay.value);\n\n//   for (let i = 1; i <= formRef.amount.value; i += 1) {\n//     createPromise(i, delay)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     delay += Number(formRef.step.value);\n//   }\n// }\n\n// // Create promise\n// function createPromise(position, delay) {\n//   const obj = { position, delay };\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         // Fulfill\n//         resolve(obj);\n//       } else {\n//         // Reject\n//         reject(obj);\n//       }\n//     }, delay);\n//   });\n// }\n//?================================================\n"],"names":["parcelRequire","form","document","querySelector","delay","step","amount","submit","addEventListener","console","log"],"version":3,"file":"03-promises.8ccd9b42.js.map"}